The TODO Api project



2018.10.27
- npm init
- use morgan middleware for logging of requests
- use body parser to parse out json into req.body
- use express-promise-router to avoid try/catch everywhere
- define routes and controllers in separate folders

npm run start-dev
- added nodemon and a script
- added joi for schema validation
- created a helper to use joi to validate the schema, 
  as middleware, before calling the controller

Tools: robomongo
- added mongoose - cool for modeling mongodb
- in app.js connect to loclahost db TODO
- created models/user which defines the schema for one user
- also User model exports the collection of users
- in controllers/user, use User model to check exists/save user 

- use jsonwebtoken(JWT) to sign tokens with a secret. 
- create a configuration file to track out globals
- in users controller - respond with signed token on signup.
- note, the controller is doing all the main work. route just sends to controller after validation

- add passport, -jwt and -local strategies.
- passport-jwt is for checking tokens that we returned in signin or signup
- passport-local is for exchanging login info for token info in signin
- passport.js installs passport middleware for jwt and local strategies.
  - for jwt - the "schema" tells passport how to get the token out of the headers, incl. secret
  - the function then gets the parsed header payload, in which we find id/email and checks against db
  - for local: I guess it expects it in body json so we tell it how to process it (ie which field is the username)
- in routes, the secret is now guarded by the jwt authentication strategy